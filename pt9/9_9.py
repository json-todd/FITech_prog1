"""
COMP.CS.100 Ohjelmointi 1 / Programming 1
9.9 Project: Course Registry

Program Description: This program implements a data structure containing information about the courses offered by a university.
Information is stored in a nested datastrucutre.
With input commands, users can interact with the datastructure such as show all available courses, show credits, add or delete courses, etc.
The program should help a student to select suitable courses to enroll.

Author note: the docstring auto-generated by VSC is different than that of PyCharm
I hope you, the TA checking this, won't mind ^^

Author: Tri Phung
Student ID: K441912
Email: tri.phung@tuni.fi
"""

def course_database_process(file)->dict:
    """ From a file, read each line with format of semi-colon(;) separated as the following
    department;course name;credit point

    Args:
        file: a file object input from the user and called open function

    Returns:
        course_db: dictionary of list of dictionary: keys are deparment, values are list,
                   with each entry in the list is a dictionary, whose keys are either 'course' and 'credit' and values are associated data
    """
    course_db = {}
    for line in file:
        data = line.rstrip().split(';')
        
        if len(data) != 3:
            return 0
        
        department = data[0]; course_name = data[1]; credit_point = data[2]

        if department not in course_db:
            course_db[department] = []

        payload = {
            "course": course_name,
            "credit": int(credit_point)
        }
        course_db[department].append(payload)    
    return course_db

def main():
    file = input('Enter file name: ')
    # file = 'courses.txt'
    
    try:
        file_handle = open(file, 'r')

    except OSError:
        print('Error opening file!')
        return 
    
    course_db = course_database_process(file_handle) 
    
    if course_db == 0:
        print('Error in file!')
        return
    
    file_handle.close()

    print(course_db)
    while True:
        print()
        print('[A]dd / [C]redits / [D]elete / [P]rint all / p[R]int department / [Q]uit')
        user_input = input('Enter command: ').split(' ')
        print()
        
        program_command = user_input[0]
        program_param = user_input[1:] if len(user_input) > 1 else None
        
        if program_command == 'a' and len(program_param) >= 3:
            add_to_db(course_db, program_param)
        elif program_command == 'c' and len(program_param) == 1:
            credit_display(course_db, program_param)
        elif program_command == 'd' and len(program_param) >= 1:
            delete_from_db(course_db, program_param)
        elif program_command == 'p':
            print_all(course_db)
        elif program_command == 'r' and len(program_param) == 1:
            print_dep(course_db, program_param)
        elif program_command == 'q':
            print('Ending program.')
            break
        else:
            print('Invalid command!')
    return

def add_to_db(db:dict, add_data:list):
    """ Add a course and its credits to the database
    Args:
        db: dict, database for the department-course-credit
        add_data: list, containing information about the added department, course, and credits
    Return: Void
    """
    add_dep = add_data[0]; add_credit = add_data[-1]
    add_course = " ".join(add_data[1:-1])
    payload = {
        'course': add_course,
        'credit': add_credit
    }

    if add_dep not in db:
        db[add_dep] = []
        print(f'Added department {add_dep} with course {add_course}')
    else:
        print(f'Added course {add_course} to department {add_dep}')
    
    db[add_dep].append(payload)
    
    return

def credit_display(db:dict, dep_data:list):
    """ Given a department name, show accumulated credits that the department offers

    Args:
        db: dict, database for the department-course-credit
        dep_data: list, containing one entry about department name
    """
    dep = dep_data[0]
    if dep in db:
        credit_total =  sum([int(course_credit['credit']) for course_credit in db[dep]] )
        print(f'Department {dep} has to offer {credit_total} cr.')
    else:
        print('Department not found!')
    
    return

def delete_from_db(db:dict, remove_data:list):
    """ Remove a department or a course within a department from the database
    Notify when department or course is not present in the database

    Args:
        db: dict, database for the department-course-credit
        remove_data: list, department to be removed, or course in a department to be removed 

    Returns:
        Void
    """
    dep_remove = remove_data[0]
    if dep_remove not in db:
        print(f"Department {dep_remove} not found!")
    elif len(remove_data) == 1:
        db.pop(dep_remove)
        print(f"Department {dep_remove} removed.")
    elif len(remove_data) > 1:
        course_remove = ' '.join(remove_data[1:])
        is_remove_success = 0
        for index, course_credit in enumerate(db[dep_remove]):
            if course_credit['course'] == course_remove:
                db[dep_remove].pop(index)
                is_remove_success = 1
                print (f"Department {dep_remove} course {course_remove} removed.")
                break
        if not is_remove_success:
            print(f"Course {course_remove} from {dep_remove} not found!")

    return
            
def print_all(db:dict):
    """ Print all departments with their courses and credits in sorted order

    Args:
        db: dict, database for the department-course-credit
    """
    db_sorted = sort_db(db)
    for department in db_sorted:
        print(f'*{department}*')
        for course_credit in db_sorted[department]:
            print(course_credit['course'] + ' : ' + str(course_credit['credit']) + ' cr')

def print_dep(db:dict, dep_data:list):
    """ Given a deparment name, print all courses and credits within the deparment in sorted order

    Args:
        db: dict, database for the department-course-credit
        dep_data: single-entry list, name of department
    """
    db_sorted = sort_db(db)
    dep = dep_data[0]
    if dep in db_sorted:
        print(f'*{dep}*')
        for course_credit in db_sorted[dep]:
            print(course_credit['course'] + ' : ' + str(course_credit['credit']) + ' cr')
    else:
        print('Department not found!')

def sort_db(db:dict)->dict:
    """ Sort the given database in the following style
    - keys: sort alphabetically
    - values: sort by the `course` property in each entry

    Args:
        db: dict, by this point I suppose you know what the database is for...

    Returns:
        db_sorted: dict, the sorted database as described above
    """
    db_sorted = {}
    for dep in sorted(db.keys()):
        course_credit = db[dep]
        if dep not in db_sorted:
            db_sorted[dep] = []
        
        course_sorted = sorted([ x['course'] for x in course_credit])
        for course_in_order in course_sorted:
            for course_credit_not_order in course_credit:
                course_not_order = course_credit_not_order['course']
                if course_in_order == course_not_order:
                    db_sorted[dep].append(course_credit_not_order)

    return db_sorted            
 
if __name__ == "__main__":
    main()
