"""
COMP.CS.100 Ohjelmointi 1 / Programming 1
6.2 Project: Weather Statistics

Program Description:

Author note: the docstring auto-generated by VSC is different than that of PyCharm
I hope you, the TA checking this, won't mind ^^

Author: Tri Phung
Student ID: K441912
Email: tri.phung@tuni.fi
"""
def input_measurement(temperature_measured = []) -> list:
    """_summary_

    Args:
        temperature_measured (list, optional): _description_. Defaults to [].

    Returns:
        list: _description_
    """
    measurement_counts = int(input("Enter amount of days: "))
    
    for i in range(measurement_counts):
        i += 1
        measurement = float(input(f"Enter day {i}. temperature in Celcius: "))
        temperature_measured.append(measurement)
        
    return temperature_measured

def mean_calculate(input_list: list) -> float:
    """_summary_

    Args:
        input_list (list): _description_

    Returns:
        float: _description_
    """
    mean =  float(sum(input_list) / len(input_list))
    return round(mean, 1)

def median_calculate(input_list: list) -> float:
    """_summary_

    Args:
        input_list (list): _description_

    Returns:
        median (float): _description_
    """
    median = float()
    sorted_list = sorted(input_list)
    list_length = len(sorted_list)
    middle_point = list_length // 2
    
    if list_length % 2 == 1:
        median = sorted_list[middle_point]
    else: 
        middle_element_1 = sorted_list[middle_point - 1]
        middle_element_2 = sorted_list[middle_point]
        median = mean_calculate([middle_element_1, middle_element_2])
        
    return round(median, 1)

def sections_by_median(input_list: list, print_this_out = True):
    """_summary_

    Args:
        input_list (list): _description_
        print_this_out (bool, optional): _description_. Defaults to True.

    Returns:
        _type_: _description_
    """
    over_at_median = list()
    under_median = list()
    median = median_calculate(input_list)
    mean = mean_calculate(input_list)
    
    for index, value in enumerate(input_list, start = 1):
        displayed_text = f"Day {index:2}. {value:5.1f}C difference to mean: {(value - mean):5.1f}C"
        
        if value >= median:
            over_at_median.append(displayed_text)
        else:
            under_median.append(displayed_text)

    if print_this_out:
        print("Over or at median were:")
        print("\n".join(over_at_median))
        print()
        
        print("Under median were:")
        print("\n".join(under_median))
        
    else:
        return over_at_median, under_median

def main():
    temperature = input_measurement()

    print()
    print(f"Temperature mean: {mean_calculate(temperature)}C")
    print(f"Temperature median: {median_calculate(temperature)}C")
    print()
    
    sections_by_median(temperature, print_this_out = True)

if __name__ ==  "__main__":
    main()